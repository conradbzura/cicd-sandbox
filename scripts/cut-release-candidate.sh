#!/bin/bash

USAGE="Usage: $0 major|minor [BRANCH=release]"

# Evaluate arguments
case $1 in
    major|minor)
        RELEASE_TYPE=$1
        ;;
    *)
        echo "ERROR: Invalid release type: $1"
        echo $USAGE
        exit 1
        ;;
esac
case $# in
    1)
        BRANCH="release"
        ;;
    2)
        BRANCH=$2
        ;;
    *)
        echo $USAGE
        exit 1
        ;;
esac

# Get the latest version tag, default to 0.0.0
VERSION=$(git tag -l "v*" | head -n 1)
if [ -z "$VERSION" ]; then
    VERSION="0.0.0"
fi

# Verify no active release candidates exist
if [[ $VERSION == *rc* ]]; then
    echo "ERROR: An active release candidate already exists: $VERSION"
    exit 1
fi

read MAJOR MINOR PATCH <<< $(scripts/split-version.sh $VERSION)

# Bump the version
case $RELEASE_TYPE in
    major)
        RELEASE_VERSION="$((MAJOR + 1)).${MINOR}rc0"
        ;;
    minor)
        RELEASE_VERSION="${MAJOR}.$((MINOR + 1))rc0"
        ;;
esac

echo "Cutting a release candidate with version $RELEASE_VERSION"

RELEASE_TAG="v$RELEASE_VERSION"

# Create a new branch for the release candidate
git fetch --unshallow
git checkout dev
git pull
git checkout -b $BRANCH
git tag $RELEASE_TAG
git push --set-upstream origin $BRANCH

gh pr create -B master -H $BRANCH --title '$RELEASE_TYPE $BRANCH' --body 'Auto-generated by `cut-release` workflow'
